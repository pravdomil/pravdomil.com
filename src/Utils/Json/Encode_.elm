module Utils.Json.Encode_ exposing (..)

{-| Generated by elm-json-interop.
-}

import Dict exposing (Dict)
import Json.Encode as E


type alias Encoder a =
    a -> E.Value



--


unit : Encoder ()
unit _ =
    E.object []


char : Encoder Char
char a =
    String.fromChar a |> E.string



--


maybe : Encoder a -> Encoder (Maybe a)
maybe encode a =
    case a of
        Just b ->
            encode b

        Nothing ->
            E.null


result : Encoder e -> Encoder v -> Encoder (Result e v)
result encodeError encodeValue a =
    case a of
        Ok b ->
            E.object [ ( "_", E.int 0 ), ( "a", encodeValue b ) ]

        Err b ->
            E.object [ ( "_", E.int 1 ), ( "a", encodeError b ) ]



--


dict : Encoder comparable -> Encoder v -> Encoder (Dict comparable v)
dict encodeKey encodeValue a =
    a
        |> Dict.toList
        |> E.list (\( k, v ) -> E.list identity [ encodeKey k, encodeValue v ])



--


tuple : Encoder a -> Encoder b -> Encoder ( a, b )
tuple encodeA encodeB ( a, b ) =
    E.object [ ( "a", encodeA a ), ( "b", encodeB b ) ]


tuple3 : Encoder a -> Encoder b -> Encoder c -> Encoder ( a, b, c )
tuple3 encodeA encodeB encodeC ( a, b, c ) =
    E.object [ ( "a", encodeA a ), ( "b", encodeB b ), ( "c", encodeC c ) ]
